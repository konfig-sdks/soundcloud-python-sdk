# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class MeQuota(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    user's upload quota
    """


    class MetaOapg:
        
        class properties:
            unlimited_upload_quota = schemas.BoolSchema
            upload_seconds_used = schemas.IntSchema
            
            
            class upload_seconds_left(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'upload_seconds_left':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "unlimited_upload_quota": unlimited_upload_quota,
                "upload_seconds_used": upload_seconds_used,
                "upload_seconds_left": upload_seconds_left,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unlimited_upload_quota"]) -> MetaOapg.properties.unlimited_upload_quota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_seconds_used"]) -> MetaOapg.properties.upload_seconds_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_seconds_left"]) -> MetaOapg.properties.upload_seconds_left: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["unlimited_upload_quota", "upload_seconds_used", "upload_seconds_left", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unlimited_upload_quota"]) -> typing.Union[MetaOapg.properties.unlimited_upload_quota, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_seconds_used"]) -> typing.Union[MetaOapg.properties.upload_seconds_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_seconds_left"]) -> typing.Union[MetaOapg.properties.upload_seconds_left, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["unlimited_upload_quota", "upload_seconds_used", "upload_seconds_left", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        unlimited_upload_quota: typing.Union[MetaOapg.properties.unlimited_upload_quota, bool, schemas.Unset] = schemas.unset,
        upload_seconds_used: typing.Union[MetaOapg.properties.upload_seconds_used, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        upload_seconds_left: typing.Union[MetaOapg.properties.upload_seconds_left, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MeQuota':
        return super().__new__(
            cls,
            *args,
            unlimited_upload_quota=unlimited_upload_quota,
            upload_seconds_used=upload_seconds_used,
            upload_seconds_left=upload_seconds_left,
            _configuration=_configuration,
            **kwargs,
        )
