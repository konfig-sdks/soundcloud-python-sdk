# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class CreateUpdatePlaylistFormRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            playlist_title = schemas.StrSchema
            
            
            class playlist_sharing(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "public": "PUBLIC",
                        "private": "PRIVATE",
                    }
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("public")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
            playlist_description = schemas.StrSchema
            playlist_tracks__id = schemas.StrSchema
            playlist_artwork_data = schemas.BinarySchema
            playlist_ean = schemas.StrSchema
            playlist_genre = schemas.StrSchema
            playlist_label_name = schemas.StrSchema
            playlist_license = schemas.StrSchema
            playlist_permalink = schemas.StrSchema
            playlist_permalink_url = schemas.StrSchema
            playlist_purchase_title = schemas.StrSchema
            playlist_purchase_url = schemas.StrSchema
            playlist_release = schemas.StrSchema
            playlist_release_date = schemas.StrSchema
            
            
            class playlist_set_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "album": "ALBUM",
                        "playlist": "PLAYLIST",
                    }
                
                @schemas.classproperty
                def ALBUM(cls):
                    return cls("album")
                
                @schemas.classproperty
                def PLAYLIST(cls):
                    return cls("playlist")
            playlist_tag_list = schemas.StrSchema
            __annotations__ = {
                "playlist[title]": playlist_title,
                "playlist[sharing]": playlist_sharing,
                "playlist[description]": playlist_description,
                "playlist[tracks][][id]": playlist_tracks__id,
                "playlist[artwork_data]": playlist_artwork_data,
                "playlist[ean]": playlist_ean,
                "playlist[genre]": playlist_genre,
                "playlist[label_name]": playlist_label_name,
                "playlist[license]": playlist_license,
                "playlist[permalink]": playlist_permalink,
                "playlist[permalink_url]": playlist_permalink_url,
                "playlist[purchase_title]": playlist_purchase_title,
                "playlist[purchase_url]": playlist_purchase_url,
                "playlist[release]": playlist_release,
                "playlist[release_date]": playlist_release_date,
                "playlist[set_type]": playlist_set_type,
                "playlist[tag_list]": playlist_tag_list,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[title]"]) -> MetaOapg.properties.playlist_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[sharing]"]) -> MetaOapg.properties.playlist_sharing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[description]"]) -> MetaOapg.properties.playlist_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[tracks][][id]"]) -> MetaOapg.properties.playlist_tracks__id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[artwork_data]"]) -> MetaOapg.properties.playlist_artwork_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[ean]"]) -> MetaOapg.properties.playlist_ean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[genre]"]) -> MetaOapg.properties.playlist_genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[label_name]"]) -> MetaOapg.properties.playlist_label_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[license]"]) -> MetaOapg.properties.playlist_license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[permalink]"]) -> MetaOapg.properties.playlist_permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[permalink_url]"]) -> MetaOapg.properties.playlist_permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[purchase_title]"]) -> MetaOapg.properties.playlist_purchase_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[purchase_url]"]) -> MetaOapg.properties.playlist_purchase_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[release]"]) -> MetaOapg.properties.playlist_release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[release_date]"]) -> MetaOapg.properties.playlist_release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[set_type]"]) -> MetaOapg.properties.playlist_set_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist[tag_list]"]) -> MetaOapg.properties.playlist_tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["playlist[title]", "playlist[sharing]", "playlist[description]", "playlist[tracks][][id]", "playlist[artwork_data]", "playlist[ean]", "playlist[genre]", "playlist[label_name]", "playlist[license]", "playlist[permalink]", "playlist[permalink_url]", "playlist[purchase_title]", "playlist[purchase_url]", "playlist[release]", "playlist[release_date]", "playlist[set_type]", "playlist[tag_list]", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[title]"]) -> typing.Union[MetaOapg.properties.playlist_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[sharing]"]) -> typing.Union[MetaOapg.properties.playlist_sharing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[description]"]) -> typing.Union[MetaOapg.properties.playlist_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[tracks][][id]"]) -> typing.Union[MetaOapg.properties.playlist_tracks__id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[artwork_data]"]) -> typing.Union[MetaOapg.properties.playlist_artwork_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[ean]"]) -> typing.Union[MetaOapg.properties.playlist_ean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[genre]"]) -> typing.Union[MetaOapg.properties.playlist_genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[label_name]"]) -> typing.Union[MetaOapg.properties.playlist_label_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[license]"]) -> typing.Union[MetaOapg.properties.playlist_license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[permalink]"]) -> typing.Union[MetaOapg.properties.playlist_permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[permalink_url]"]) -> typing.Union[MetaOapg.properties.playlist_permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[purchase_title]"]) -> typing.Union[MetaOapg.properties.playlist_purchase_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[purchase_url]"]) -> typing.Union[MetaOapg.properties.playlist_purchase_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[release]"]) -> typing.Union[MetaOapg.properties.playlist_release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[release_date]"]) -> typing.Union[MetaOapg.properties.playlist_release_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[set_type]"]) -> typing.Union[MetaOapg.properties.playlist_set_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist[tag_list]"]) -> typing.Union[MetaOapg.properties.playlist_tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["playlist[title]", "playlist[sharing]", "playlist[description]", "playlist[tracks][][id]", "playlist[artwork_data]", "playlist[ean]", "playlist[genre]", "playlist[label_name]", "playlist[license]", "playlist[permalink]", "playlist[permalink_url]", "playlist[purchase_title]", "playlist[purchase_url]", "playlist[release]", "playlist[release_date]", "playlist[set_type]", "playlist[tag_list]", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateUpdatePlaylistFormRequest':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
