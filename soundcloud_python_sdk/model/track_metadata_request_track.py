# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class TrackMetadataRequestTrack(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            permalink = schemas.StrSchema
            
            
            class sharing(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "public": "PUBLIC",
                        "private": "PRIVATE",
                    }
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("public")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
            
            
            class embeddable_by(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "all": "ALL",
                        "me": "ME",
                        "none": "NONE",
                    }
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
                
                @schemas.classproperty
                def ME(cls):
                    return cls("me")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("none")
            purchase_url = schemas.StrSchema
            genre = schemas.StrSchema
            tag_list = schemas.StrSchema
            label_name = schemas.StrSchema
            release = schemas.StrSchema
            release_date = schemas.StrSchema
            streamable = schemas.BoolSchema
            downloadable = schemas.BoolSchema
            
            
            class license(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "no-rights-reserved": "NORIGHTSRESERVED",
                        "all-rights-reserved": "ALLRIGHTSRESERVED",
                        "cc-by": "CCBY",
                        "cc-by-nc": "CCBYNC",
                        "cc-by-nd": "CCBYND",
                        "cc-by-sa": "CCBYSA",
                        "cc-by-nc-nd": "CCBYNCND",
                        "cc-by-nc-sa": "CCBYNCSA",
                    }
                
                @schemas.classproperty
                def NORIGHTSRESERVED(cls):
                    return cls("no-rights-reserved")
                
                @schemas.classproperty
                def ALLRIGHTSRESERVED(cls):
                    return cls("all-rights-reserved")
                
                @schemas.classproperty
                def CCBY(cls):
                    return cls("cc-by")
                
                @schemas.classproperty
                def CCBYNC(cls):
                    return cls("cc-by-nc")
                
                @schemas.classproperty
                def CCBYND(cls):
                    return cls("cc-by-nd")
                
                @schemas.classproperty
                def CCBYSA(cls):
                    return cls("cc-by-sa")
                
                @schemas.classproperty
                def CCBYNCND(cls):
                    return cls("cc-by-nc-nd")
                
                @schemas.classproperty
                def CCBYNCSA(cls):
                    return cls("cc-by-nc-sa")
            commentable = schemas.BoolSchema
            isrc = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "permalink": permalink,
                "sharing": sharing,
                "embeddable_by": embeddable_by,
                "purchase_url": purchase_url,
                "genre": genre,
                "tag_list": tag_list,
                "label_name": label_name,
                "release": release,
                "release_date": release_date,
                "streamable": streamable,
                "downloadable": downloadable,
                "license": license,
                "commentable": commentable,
                "isrc": isrc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> MetaOapg.properties.sharing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embeddable_by"]) -> MetaOapg.properties.embeddable_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_url"]) -> MetaOapg.properties.purchase_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> MetaOapg.properties.genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_list"]) -> MetaOapg.properties.tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_name"]) -> MetaOapg.properties.label_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release"]) -> MetaOapg.properties.release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamable"]) -> MetaOapg.properties.streamable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloadable"]) -> MetaOapg.properties.downloadable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commentable"]) -> MetaOapg.properties.commentable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isrc"]) -> MetaOapg.properties.isrc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "permalink", "sharing", "embeddable_by", "purchase_url", "genre", "tag_list", "label_name", "release", "release_date", "streamable", "downloadable", "license", "commentable", "isrc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> typing.Union[MetaOapg.properties.sharing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embeddable_by"]) -> typing.Union[MetaOapg.properties.embeddable_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_url"]) -> typing.Union[MetaOapg.properties.purchase_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union[MetaOapg.properties.genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_list"]) -> typing.Union[MetaOapg.properties.tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_name"]) -> typing.Union[MetaOapg.properties.label_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release"]) -> typing.Union[MetaOapg.properties.release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date"]) -> typing.Union[MetaOapg.properties.release_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamable"]) -> typing.Union[MetaOapg.properties.streamable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloadable"]) -> typing.Union[MetaOapg.properties.downloadable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commentable"]) -> typing.Union[MetaOapg.properties.commentable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isrc"]) -> typing.Union[MetaOapg.properties.isrc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "permalink", "sharing", "embeddable_by", "purchase_url", "genre", "tag_list", "label_name", "release", "release_date", "streamable", "downloadable", "license", "commentable", "isrc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        sharing: typing.Union[MetaOapg.properties.sharing, str, schemas.Unset] = schemas.unset,
        embeddable_by: typing.Union[MetaOapg.properties.embeddable_by, str, schemas.Unset] = schemas.unset,
        purchase_url: typing.Union[MetaOapg.properties.purchase_url, str, schemas.Unset] = schemas.unset,
        genre: typing.Union[MetaOapg.properties.genre, str, schemas.Unset] = schemas.unset,
        tag_list: typing.Union[MetaOapg.properties.tag_list, str, schemas.Unset] = schemas.unset,
        label_name: typing.Union[MetaOapg.properties.label_name, str, schemas.Unset] = schemas.unset,
        release: typing.Union[MetaOapg.properties.release, str, schemas.Unset] = schemas.unset,
        release_date: typing.Union[MetaOapg.properties.release_date, str, schemas.Unset] = schemas.unset,
        streamable: typing.Union[MetaOapg.properties.streamable, bool, schemas.Unset] = schemas.unset,
        downloadable: typing.Union[MetaOapg.properties.downloadable, bool, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        commentable: typing.Union[MetaOapg.properties.commentable, bool, schemas.Unset] = schemas.unset,
        isrc: typing.Union[MetaOapg.properties.isrc, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrackMetadataRequestTrack':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            permalink=permalink,
            sharing=sharing,
            embeddable_by=embeddable_by,
            purchase_url=purchase_url,
            genre=genre,
            tag_list=tag_list,
            label_name=label_name,
            release=release,
            release_date=release_date,
            streamable=streamable,
            downloadable=downloadable,
            license=license,
            commentable=commentable,
            isrc=isrc,
            _configuration=_configuration,
            **kwargs,
        )
