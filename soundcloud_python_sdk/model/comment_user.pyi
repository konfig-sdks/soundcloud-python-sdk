# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class CommentUser(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    SoundCloud User object
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            kind = schemas.StrSchema
            permalink = schemas.StrSchema
            username = schemas.StrSchema
            last_modified = schemas.StrSchema
            uri = schemas.StrSchema
            permalink_url = schemas.StrSchema
            avatar_url = schemas.StrSchema
            followers_count = schemas.IntSchema
            followings_count = schemas.IntSchema
            reposts_count = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "kind": kind,
                "permalink": permalink,
                "username": username,
                "last_modified": last_modified,
                "uri": uri,
                "permalink_url": permalink_url,
                "avatar_url": avatar_url,
                "followers_count": followers_count,
                "followings_count": followings_count,
                "reposts_count": reposts_count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink_url"]) -> MetaOapg.properties.permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_url"]) -> MetaOapg.properties.avatar_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["followers_count"]) -> MetaOapg.properties.followers_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["followings_count"]) -> MetaOapg.properties.followings_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reposts_count"]) -> MetaOapg.properties.reposts_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "kind", "permalink", "username", "last_modified", "uri", "permalink_url", "avatar_url", "followers_count", "followings_count", "reposts_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink_url"]) -> typing.Union[MetaOapg.properties.permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_url"]) -> typing.Union[MetaOapg.properties.avatar_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["followers_count"]) -> typing.Union[MetaOapg.properties.followers_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["followings_count"]) -> typing.Union[MetaOapg.properties.followings_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reposts_count"]) -> typing.Union[MetaOapg.properties.reposts_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "kind", "permalink", "username", "last_modified", "uri", "permalink_url", "avatar_url", "followers_count", "followings_count", "reposts_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        permalink_url: typing.Union[MetaOapg.properties.permalink_url, str, schemas.Unset] = schemas.unset,
        avatar_url: typing.Union[MetaOapg.properties.avatar_url, str, schemas.Unset] = schemas.unset,
        followers_count: typing.Union[MetaOapg.properties.followers_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        followings_count: typing.Union[MetaOapg.properties.followings_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reposts_count: typing.Union[MetaOapg.properties.reposts_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CommentUser':
        return super().__new__(
            cls,
            *args,
            id=id,
            kind=kind,
            permalink=permalink,
            username=username,
            last_modified=last_modified,
            uri=uri,
            permalink_url=permalink_url,
            avatar_url=avatar_url,
            followers_count=followers_count,
            followings_count=followings_count,
            reposts_count=reposts_count,
            _configuration=_configuration,
            **kwargs,
        )
