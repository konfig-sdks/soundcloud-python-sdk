# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class Activities(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    User's activities.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def collection() -> typing.Type['ActivitiesCollection']:
                return ActivitiesCollection
            next_href = schemas.StrSchema
            future_href = schemas.StrSchema
            __annotations__ = {
                "collection": collection,
                "next_href": next_href,
                "future_href": future_href,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> 'ActivitiesCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_href"]) -> MetaOapg.properties.next_href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["future_href"]) -> MetaOapg.properties.future_href: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collection", "next_href", "future_href", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> typing.Union['ActivitiesCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_href"]) -> typing.Union[MetaOapg.properties.next_href, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["future_href"]) -> typing.Union[MetaOapg.properties.future_href, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collection", "next_href", "future_href", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        collection: typing.Union['ActivitiesCollection', schemas.Unset] = schemas.unset,
        next_href: typing.Union[MetaOapg.properties.next_href, str, schemas.Unset] = schemas.unset,
        future_href: typing.Union[MetaOapg.properties.future_href, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Activities':
        return super().__new__(
            cls,
            *args,
            collection=collection,
            next_href=next_href,
            future_href=future_href,
            _configuration=_configuration,
            **kwargs,
        )

from soundcloud_python_sdk.model.activities_collection import ActivitiesCollection
