# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class Playlist(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Soundcloud Playlist Object
    """


    class MetaOapg:
        
        class properties:
            
            
            class tags(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            title = schemas.StrSchema
            description = schemas.StrSchema
            id = schemas.IntSchema
            kind = schemas.StrSchema
            artwork_url = schemas.StrSchema
            created_at = schemas.StrSchema
            downloadable = schemas.BoolSchema
            duration = schemas.IntSchema
            ean = schemas.StrSchema
            embeddable_by = schemas.StrSchema
            genre = schemas.StrSchema
            label_id = schemas.IntSchema
            label_name = schemas.StrSchema
            last_modified = schemas.StrSchema
            license = schemas.StrSchema
            permalink = schemas.StrSchema
            permalink_url = schemas.StrSchema
            playlist_type = schemas.StrSchema
            purchase_title = schemas.StrSchema
            purchase_url = schemas.StrSchema
            release = schemas.StrSchema
            release_day = schemas.IntSchema
            release_month = schemas.IntSchema
            release_year = schemas.IntSchema
            sharing = schemas.StrSchema
            streamable = schemas.BoolSchema
            tag_list = schemas.StrSchema
            track_count = schemas.IntSchema
            
            
            class tracks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Track']:
                        return Track
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Track'], typing.List['Track']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tracks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Track':
                    return super().__getitem__(i)
            type = schemas.StrSchema
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            user_id = schemas.IntSchema
            likes_count = schemas.IntSchema
            
            
            class label(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class all_of_0(
                        schemas.DictBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneFrozenDictMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'all_of_0':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.all_of_0,
                            User,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'label':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class tracks_uri(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tracks_uri':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "tags": tags,
                "title": title,
                "description": description,
                "id": id,
                "kind": kind,
                "artwork_url": artwork_url,
                "created_at": created_at,
                "downloadable": downloadable,
                "duration": duration,
                "ean": ean,
                "embeddable_by": embeddable_by,
                "genre": genre,
                "label_id": label_id,
                "label_name": label_name,
                "last_modified": last_modified,
                "license": license,
                "permalink": permalink,
                "permalink_url": permalink_url,
                "playlist_type": playlist_type,
                "purchase_title": purchase_title,
                "purchase_url": purchase_url,
                "release": release,
                "release_day": release_day,
                "release_month": release_month,
                "release_year": release_year,
                "sharing": sharing,
                "streamable": streamable,
                "tag_list": tag_list,
                "track_count": track_count,
                "tracks": tracks,
                "type": type,
                "uri": uri,
                "user": user,
                "user_id": user_id,
                "likes_count": likes_count,
                "label": label,
                "tracks_uri": tracks_uri,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artwork_url"]) -> MetaOapg.properties.artwork_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloadable"]) -> MetaOapg.properties.downloadable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ean"]) -> MetaOapg.properties.ean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embeddable_by"]) -> MetaOapg.properties.embeddable_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> MetaOapg.properties.genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_id"]) -> MetaOapg.properties.label_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_name"]) -> MetaOapg.properties.label_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink_url"]) -> MetaOapg.properties.permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist_type"]) -> MetaOapg.properties.playlist_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_title"]) -> MetaOapg.properties.purchase_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_url"]) -> MetaOapg.properties.purchase_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release"]) -> MetaOapg.properties.release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_day"]) -> MetaOapg.properties.release_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_month"]) -> MetaOapg.properties.release_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_year"]) -> MetaOapg.properties.release_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> MetaOapg.properties.sharing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamable"]) -> MetaOapg.properties.streamable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_list"]) -> MetaOapg.properties.tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_count"]) -> MetaOapg.properties.track_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracks"]) -> MetaOapg.properties.tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes_count"]) -> MetaOapg.properties.likes_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracks_uri"]) -> MetaOapg.properties.tracks_uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "description", "id", "kind", "artwork_url", "created_at", "downloadable", "duration", "ean", "embeddable_by", "genre", "label_id", "label_name", "last_modified", "license", "permalink", "permalink_url", "playlist_type", "purchase_title", "purchase_url", "release", "release_day", "release_month", "release_year", "sharing", "streamable", "tag_list", "track_count", "tracks", "type", "uri", "user", "user_id", "likes_count", "label", "tracks_uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artwork_url"]) -> typing.Union[MetaOapg.properties.artwork_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloadable"]) -> typing.Union[MetaOapg.properties.downloadable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ean"]) -> typing.Union[MetaOapg.properties.ean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embeddable_by"]) -> typing.Union[MetaOapg.properties.embeddable_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union[MetaOapg.properties.genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_id"]) -> typing.Union[MetaOapg.properties.label_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_name"]) -> typing.Union[MetaOapg.properties.label_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink_url"]) -> typing.Union[MetaOapg.properties.permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist_type"]) -> typing.Union[MetaOapg.properties.playlist_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_title"]) -> typing.Union[MetaOapg.properties.purchase_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_url"]) -> typing.Union[MetaOapg.properties.purchase_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release"]) -> typing.Union[MetaOapg.properties.release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_day"]) -> typing.Union[MetaOapg.properties.release_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_month"]) -> typing.Union[MetaOapg.properties.release_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_year"]) -> typing.Union[MetaOapg.properties.release_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> typing.Union[MetaOapg.properties.sharing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamable"]) -> typing.Union[MetaOapg.properties.streamable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_list"]) -> typing.Union[MetaOapg.properties.tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_count"]) -> typing.Union[MetaOapg.properties.track_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracks"]) -> typing.Union[MetaOapg.properties.tracks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> typing.Union[MetaOapg.properties.user_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes_count"]) -> typing.Union[MetaOapg.properties.likes_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracks_uri"]) -> typing.Union[MetaOapg.properties.tracks_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "description", "id", "kind", "artwork_url", "created_at", "downloadable", "duration", "ean", "embeddable_by", "genre", "label_id", "label_name", "last_modified", "license", "permalink", "permalink_url", "playlist_type", "purchase_title", "purchase_url", "release", "release_day", "release_month", "release_year", "sharing", "streamable", "tag_list", "track_count", "tracks", "type", "uri", "user", "user_id", "likes_count", "label", "tracks_uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union[MetaOapg.properties.tags, None, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        artwork_url: typing.Union[MetaOapg.properties.artwork_url, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        downloadable: typing.Union[MetaOapg.properties.downloadable, bool, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ean: typing.Union[MetaOapg.properties.ean, str, schemas.Unset] = schemas.unset,
        embeddable_by: typing.Union[MetaOapg.properties.embeddable_by, str, schemas.Unset] = schemas.unset,
        genre: typing.Union[MetaOapg.properties.genre, str, schemas.Unset] = schemas.unset,
        label_id: typing.Union[MetaOapg.properties.label_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        label_name: typing.Union[MetaOapg.properties.label_name, str, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        permalink_url: typing.Union[MetaOapg.properties.permalink_url, str, schemas.Unset] = schemas.unset,
        playlist_type: typing.Union[MetaOapg.properties.playlist_type, str, schemas.Unset] = schemas.unset,
        purchase_title: typing.Union[MetaOapg.properties.purchase_title, str, schemas.Unset] = schemas.unset,
        purchase_url: typing.Union[MetaOapg.properties.purchase_url, str, schemas.Unset] = schemas.unset,
        release: typing.Union[MetaOapg.properties.release, str, schemas.Unset] = schemas.unset,
        release_day: typing.Union[MetaOapg.properties.release_day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        release_month: typing.Union[MetaOapg.properties.release_month, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        release_year: typing.Union[MetaOapg.properties.release_year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sharing: typing.Union[MetaOapg.properties.sharing, str, schemas.Unset] = schemas.unset,
        streamable: typing.Union[MetaOapg.properties.streamable, bool, schemas.Unset] = schemas.unset,
        tag_list: typing.Union[MetaOapg.properties.tag_list, str, schemas.Unset] = schemas.unset,
        track_count: typing.Union[MetaOapg.properties.track_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tracks: typing.Union[MetaOapg.properties.tracks, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        likes_count: typing.Union[MetaOapg.properties.likes_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        tracks_uri: typing.Union[MetaOapg.properties.tracks_uri, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Playlist':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            title=title,
            description=description,
            id=id,
            kind=kind,
            artwork_url=artwork_url,
            created_at=created_at,
            downloadable=downloadable,
            duration=duration,
            ean=ean,
            embeddable_by=embeddable_by,
            genre=genre,
            label_id=label_id,
            label_name=label_name,
            last_modified=last_modified,
            license=license,
            permalink=permalink,
            permalink_url=permalink_url,
            playlist_type=playlist_type,
            purchase_title=purchase_title,
            purchase_url=purchase_url,
            release=release,
            release_day=release_day,
            release_month=release_month,
            release_year=release_year,
            sharing=sharing,
            streamable=streamable,
            tag_list=tag_list,
            track_count=track_count,
            tracks=tracks,
            type=type,
            uri=uri,
            user=user,
            user_id=user_id,
            likes_count=likes_count,
            label=label,
            tracks_uri=tracks_uri,
            _configuration=_configuration,
            **kwargs,
        )

from soundcloud_python_sdk.model.track import Track
from soundcloud_python_sdk.model.user import User
