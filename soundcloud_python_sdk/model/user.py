# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    SoundCloud User object
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            avatar_url = schemas.StrSchema
            city = schemas.StrSchema
            country = schemas.StrSchema
            discogs_name = schemas.StrSchema
            first_name = schemas.StrSchema
            followers_count = schemas.IntSchema
            followings_count = schemas.IntSchema
            full_name = schemas.StrSchema
            id = schemas.IntSchema
            kind = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            last_modified = schemas.DateTimeSchema
            last_name = schemas.StrSchema
            myspace_name = schemas.StrSchema
            permalink = schemas.StrSchema
            permalink_url = schemas.StrSchema
            plan = schemas.StrSchema
            playlist_count = schemas.IntSchema
            public_favorites_count = schemas.IntSchema
            reposts_count = schemas.IntSchema
            track_count = schemas.IntSchema
            uri = schemas.StrSchema
            username = schemas.StrSchema
            website = schemas.StrSchema
            website_title = schemas.StrSchema
            
            
            class subscriptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedBase,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class any_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        
                                        
                                        class product(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    id = schemas.StrSchema
                                                    name = schemas.StrSchema
                                                    __annotations__ = {
                                                        "id": id,
                                                        "name": name,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                                name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'product':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    id=id,
                                                    name=name,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        recurring = schemas.BoolSchema
                                        __annotations__ = {
                                            "product": product,
                                            "recurring": recurring,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["recurring"]) -> MetaOapg.properties.recurring: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["product", "recurring", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["product"]) -> typing.Union[MetaOapg.properties.product, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["recurring"]) -> typing.Union[MetaOapg.properties.recurring, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["product", "recurring", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, ],
                                    product: typing.Union[MetaOapg.properties.product, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                    recurring: typing.Union[MetaOapg.properties.recurring, bool, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'any_of_0':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        product=product,
                                        recurring=recurring,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.any_of_0,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, ]], typing.List[typing.Union[MetaOapg.items, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subscriptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "description": description,
                "avatar_url": avatar_url,
                "city": city,
                "country": country,
                "discogs_name": discogs_name,
                "first_name": first_name,
                "followers_count": followers_count,
                "followings_count": followings_count,
                "full_name": full_name,
                "id": id,
                "kind": kind,
                "created_at": created_at,
                "last_modified": last_modified,
                "last_name": last_name,
                "myspace_name": myspace_name,
                "permalink": permalink,
                "permalink_url": permalink_url,
                "plan": plan,
                "playlist_count": playlist_count,
                "public_favorites_count": public_favorites_count,
                "reposts_count": reposts_count,
                "track_count": track_count,
                "uri": uri,
                "username": username,
                "website": website,
                "website_title": website_title,
                "subscriptions": subscriptions,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_url"]) -> MetaOapg.properties.avatar_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discogs_name"]) -> MetaOapg.properties.discogs_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["followers_count"]) -> MetaOapg.properties.followers_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["followings_count"]) -> MetaOapg.properties.followings_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["myspace_name"]) -> MetaOapg.properties.myspace_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink_url"]) -> MetaOapg.properties.permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plan"]) -> MetaOapg.properties.plan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist_count"]) -> MetaOapg.properties.playlist_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_favorites_count"]) -> MetaOapg.properties.public_favorites_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reposts_count"]) -> MetaOapg.properties.reposts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_count"]) -> MetaOapg.properties.track_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website_title"]) -> MetaOapg.properties.website_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptions"]) -> MetaOapg.properties.subscriptions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "avatar_url", "city", "country", "discogs_name", "first_name", "followers_count", "followings_count", "full_name", "id", "kind", "created_at", "last_modified", "last_name", "myspace_name", "permalink", "permalink_url", "plan", "playlist_count", "public_favorites_count", "reposts_count", "track_count", "uri", "username", "website", "website_title", "subscriptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_url"]) -> typing.Union[MetaOapg.properties.avatar_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discogs_name"]) -> typing.Union[MetaOapg.properties.discogs_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["followers_count"]) -> typing.Union[MetaOapg.properties.followers_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["followings_count"]) -> typing.Union[MetaOapg.properties.followings_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["myspace_name"]) -> typing.Union[MetaOapg.properties.myspace_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink_url"]) -> typing.Union[MetaOapg.properties.permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plan"]) -> typing.Union[MetaOapg.properties.plan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist_count"]) -> typing.Union[MetaOapg.properties.playlist_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_favorites_count"]) -> typing.Union[MetaOapg.properties.public_favorites_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reposts_count"]) -> typing.Union[MetaOapg.properties.reposts_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_count"]) -> typing.Union[MetaOapg.properties.track_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website_title"]) -> typing.Union[MetaOapg.properties.website_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptions"]) -> typing.Union[MetaOapg.properties.subscriptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "avatar_url", "city", "country", "discogs_name", "first_name", "followers_count", "followings_count", "full_name", "id", "kind", "created_at", "last_modified", "last_name", "myspace_name", "permalink", "permalink_url", "plan", "playlist_count", "public_favorites_count", "reposts_count", "track_count", "uri", "username", "website", "website_title", "subscriptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        avatar_url: typing.Union[MetaOapg.properties.avatar_url, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        discogs_name: typing.Union[MetaOapg.properties.discogs_name, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        followers_count: typing.Union[MetaOapg.properties.followers_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        followings_count: typing.Union[MetaOapg.properties.followings_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        myspace_name: typing.Union[MetaOapg.properties.myspace_name, str, schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        permalink_url: typing.Union[MetaOapg.properties.permalink_url, str, schemas.Unset] = schemas.unset,
        plan: typing.Union[MetaOapg.properties.plan, str, schemas.Unset] = schemas.unset,
        playlist_count: typing.Union[MetaOapg.properties.playlist_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        public_favorites_count: typing.Union[MetaOapg.properties.public_favorites_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reposts_count: typing.Union[MetaOapg.properties.reposts_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        track_count: typing.Union[MetaOapg.properties.track_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        website_title: typing.Union[MetaOapg.properties.website_title, str, schemas.Unset] = schemas.unset,
        subscriptions: typing.Union[MetaOapg.properties.subscriptions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            description=description,
            avatar_url=avatar_url,
            city=city,
            country=country,
            discogs_name=discogs_name,
            first_name=first_name,
            followers_count=followers_count,
            followings_count=followings_count,
            full_name=full_name,
            id=id,
            kind=kind,
            created_at=created_at,
            last_modified=last_modified,
            last_name=last_name,
            myspace_name=myspace_name,
            permalink=permalink,
            permalink_url=permalink_url,
            plan=plan,
            playlist_count=playlist_count,
            public_favorites_count=public_favorites_count,
            reposts_count=reposts_count,
            track_count=track_count,
            uri=uri,
            username=username,
            website=website,
            website_title=website_title,
            subscriptions=subscriptions,
            _configuration=_configuration,
            **kwargs,
        )
