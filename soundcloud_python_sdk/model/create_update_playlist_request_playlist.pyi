# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class CreateUpdatePlaylistRequestPlaylist(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class sharing(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("public")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
        
            @staticmethod
            def tracks() -> typing.Type['CreateUpdatePlaylistRequestPlaylistTracks']:
                return CreateUpdatePlaylistRequestPlaylistTracks
            artwork_data = schemas.BinarySchema
            ean = schemas.StrSchema
            genre = schemas.StrSchema
            label_name = schemas.StrSchema
            license = schemas.StrSchema
            permalink = schemas.StrSchema
            permalink_url = schemas.StrSchema
            purchase_title = schemas.StrSchema
            purchase_url = schemas.StrSchema
            release = schemas.StrSchema
            release_date = schemas.StrSchema
            
            
            class set_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALBUM(cls):
                    return cls("album")
                
                @schemas.classproperty
                def PLAYLIST(cls):
                    return cls("playlist")
            tag_list = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "sharing": sharing,
                "tracks": tracks,
                "artwork_data": artwork_data,
                "ean": ean,
                "genre": genre,
                "label_name": label_name,
                "license": license,
                "permalink": permalink,
                "permalink_url": permalink_url,
                "purchase_title": purchase_title,
                "purchase_url": purchase_url,
                "release": release,
                "release_date": release_date,
                "set_type": set_type,
                "tag_list": tag_list,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> MetaOapg.properties.sharing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracks"]) -> 'CreateUpdatePlaylistRequestPlaylistTracks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artwork_data"]) -> MetaOapg.properties.artwork_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ean"]) -> MetaOapg.properties.ean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> MetaOapg.properties.genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_name"]) -> MetaOapg.properties.label_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink"]) -> MetaOapg.properties.permalink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink_url"]) -> MetaOapg.properties.permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_title"]) -> MetaOapg.properties.purchase_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_url"]) -> MetaOapg.properties.purchase_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release"]) -> MetaOapg.properties.release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["set_type"]) -> MetaOapg.properties.set_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_list"]) -> MetaOapg.properties.tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "sharing", "tracks", "artwork_data", "ean", "genre", "label_name", "license", "permalink", "permalink_url", "purchase_title", "purchase_url", "release", "release_date", "set_type", "tag_list", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> typing.Union[MetaOapg.properties.sharing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracks"]) -> typing.Union['CreateUpdatePlaylistRequestPlaylistTracks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artwork_data"]) -> typing.Union[MetaOapg.properties.artwork_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ean"]) -> typing.Union[MetaOapg.properties.ean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union[MetaOapg.properties.genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_name"]) -> typing.Union[MetaOapg.properties.label_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink"]) -> typing.Union[MetaOapg.properties.permalink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink_url"]) -> typing.Union[MetaOapg.properties.permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_title"]) -> typing.Union[MetaOapg.properties.purchase_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_url"]) -> typing.Union[MetaOapg.properties.purchase_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release"]) -> typing.Union[MetaOapg.properties.release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date"]) -> typing.Union[MetaOapg.properties.release_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["set_type"]) -> typing.Union[MetaOapg.properties.set_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_list"]) -> typing.Union[MetaOapg.properties.tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "sharing", "tracks", "artwork_data", "ean", "genre", "label_name", "license", "permalink", "permalink_url", "purchase_title", "purchase_url", "release", "release_date", "set_type", "tag_list", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        sharing: typing.Union[MetaOapg.properties.sharing, str, schemas.Unset] = schemas.unset,
        tracks: typing.Union['CreateUpdatePlaylistRequestPlaylistTracks', schemas.Unset] = schemas.unset,
        artwork_data: typing.Union[MetaOapg.properties.artwork_data, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ean: typing.Union[MetaOapg.properties.ean, str, schemas.Unset] = schemas.unset,
        genre: typing.Union[MetaOapg.properties.genre, str, schemas.Unset] = schemas.unset,
        label_name: typing.Union[MetaOapg.properties.label_name, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        permalink: typing.Union[MetaOapg.properties.permalink, str, schemas.Unset] = schemas.unset,
        permalink_url: typing.Union[MetaOapg.properties.permalink_url, str, schemas.Unset] = schemas.unset,
        purchase_title: typing.Union[MetaOapg.properties.purchase_title, str, schemas.Unset] = schemas.unset,
        purchase_url: typing.Union[MetaOapg.properties.purchase_url, str, schemas.Unset] = schemas.unset,
        release: typing.Union[MetaOapg.properties.release, str, schemas.Unset] = schemas.unset,
        release_date: typing.Union[MetaOapg.properties.release_date, str, schemas.Unset] = schemas.unset,
        set_type: typing.Union[MetaOapg.properties.set_type, str, schemas.Unset] = schemas.unset,
        tag_list: typing.Union[MetaOapg.properties.tag_list, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateUpdatePlaylistRequestPlaylist':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            sharing=sharing,
            tracks=tracks,
            artwork_data=artwork_data,
            ean=ean,
            genre=genre,
            label_name=label_name,
            license=license,
            permalink=permalink,
            permalink_url=permalink_url,
            purchase_title=purchase_title,
            purchase_url=purchase_url,
            release=release,
            release_date=release_date,
            set_type=set_type,
            tag_list=tag_list,
            _configuration=_configuration,
            **kwargs,
        )

from soundcloud_python_sdk.model.create_update_playlist_request_playlist_tracks import CreateUpdatePlaylistRequestPlaylistTracks
