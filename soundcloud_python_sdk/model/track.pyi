# coding: utf-8

"""
    SoundCloud Public API Specification

    Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.

    The version of the OpenAPI document: 1.0.0
    Created by: https://github.com/soundcloud/api
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from soundcloud_python_sdk import schemas  # noqa: F401


class Track(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Soundcloud Track object.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            artwork_url = schemas.StrSchema
            bpm = schemas.IntSchema
            comment_count = schemas.IntSchema
            commentable = schemas.BoolSchema
            created_at = schemas.StrSchema
            download_count = schemas.IntSchema
            downloadable = schemas.StrSchema
            duration = schemas.IntSchema
            embeddable_by = schemas.StrSchema
            favoritings_count = schemas.IntSchema
            genre = schemas.StrSchema
            id = schemas.IntSchema
            isrc = schemas.StrSchema
            key_signature = schemas.StrSchema
            kind = schemas.StrSchema
            label_name = schemas.StrSchema
            license = schemas.StrSchema
            permalink_url = schemas.StrSchema
            playback_count = schemas.IntSchema
            purchase_title = schemas.StrSchema
            purchase_url = schemas.StrSchema
            release = schemas.StrSchema
            release_day = schemas.IntSchema
            release_month = schemas.IntSchema
            release_year = schemas.IntSchema
            sharing = schemas.StrSchema
            stream_url = schemas.StrSchema
            streamable = schemas.BoolSchema
            tag_list = schemas.StrSchema
            uri = schemas.StrSchema
            
            
            class user(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    all_of_1 = schemas.AnyTypeSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            User,
                            cls.all_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'user':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            user_favorite = schemas.BoolSchema
            user_playback_count = schemas.IntSchema
            waveform_url = schemas.StrSchema
            available_country_codes = schemas.StrSchema
            
            
            class access(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "playable": "PLAYABLE",
                        "preview": "PREVIEW",
                        "blocked": "BLOCKED",
                    }
                
                @schemas.classproperty
                def PLAYABLE(cls):
                    return cls("playable")
                
                @schemas.classproperty
                def PREVIEW(cls):
                    return cls("preview")
                
                @schemas.classproperty
                def BLOCKED(cls):
                    return cls("blocked")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'access':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            download_url = schemas.StrSchema
            reposts_count = schemas.IntSchema
            secret_uri = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "artwork_url": artwork_url,
                "bpm": bpm,
                "comment_count": comment_count,
                "commentable": commentable,
                "created_at": created_at,
                "download_count": download_count,
                "downloadable": downloadable,
                "duration": duration,
                "embeddable_by": embeddable_by,
                "favoritings_count": favoritings_count,
                "genre": genre,
                "id": id,
                "isrc": isrc,
                "key_signature": key_signature,
                "kind": kind,
                "label_name": label_name,
                "license": license,
                "permalink_url": permalink_url,
                "playback_count": playback_count,
                "purchase_title": purchase_title,
                "purchase_url": purchase_url,
                "release": release,
                "release_day": release_day,
                "release_month": release_month,
                "release_year": release_year,
                "sharing": sharing,
                "stream_url": stream_url,
                "streamable": streamable,
                "tag_list": tag_list,
                "uri": uri,
                "user": user,
                "user_favorite": user_favorite,
                "user_playback_count": user_playback_count,
                "waveform_url": waveform_url,
                "available_country_codes": available_country_codes,
                "access": access,
                "download_url": download_url,
                "reposts_count": reposts_count,
                "secret_uri": secret_uri,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artwork_url"]) -> MetaOapg.properties.artwork_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bpm"]) -> MetaOapg.properties.bpm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment_count"]) -> MetaOapg.properties.comment_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commentable"]) -> MetaOapg.properties.commentable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_count"]) -> MetaOapg.properties.download_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloadable"]) -> MetaOapg.properties.downloadable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embeddable_by"]) -> MetaOapg.properties.embeddable_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favoritings_count"]) -> MetaOapg.properties.favoritings_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> MetaOapg.properties.genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isrc"]) -> MetaOapg.properties.isrc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_signature"]) -> MetaOapg.properties.key_signature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_name"]) -> MetaOapg.properties.label_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permalink_url"]) -> MetaOapg.properties.permalink_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playback_count"]) -> MetaOapg.properties.playback_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_title"]) -> MetaOapg.properties.purchase_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_url"]) -> MetaOapg.properties.purchase_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release"]) -> MetaOapg.properties.release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_day"]) -> MetaOapg.properties.release_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_month"]) -> MetaOapg.properties.release_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_year"]) -> MetaOapg.properties.release_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharing"]) -> MetaOapg.properties.sharing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_url"]) -> MetaOapg.properties.stream_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamable"]) -> MetaOapg.properties.streamable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag_list"]) -> MetaOapg.properties.tag_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_favorite"]) -> MetaOapg.properties.user_favorite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_playback_count"]) -> MetaOapg.properties.user_playback_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waveform_url"]) -> MetaOapg.properties.waveform_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_country_codes"]) -> MetaOapg.properties.available_country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_url"]) -> MetaOapg.properties.download_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reposts_count"]) -> MetaOapg.properties.reposts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_uri"]) -> MetaOapg.properties.secret_uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "artwork_url", "bpm", "comment_count", "commentable", "created_at", "download_count", "downloadable", "duration", "embeddable_by", "favoritings_count", "genre", "id", "isrc", "key_signature", "kind", "label_name", "license", "permalink_url", "playback_count", "purchase_title", "purchase_url", "release", "release_day", "release_month", "release_year", "sharing", "stream_url", "streamable", "tag_list", "uri", "user", "user_favorite", "user_playback_count", "waveform_url", "available_country_codes", "access", "download_url", "reposts_count", "secret_uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artwork_url"]) -> typing.Union[MetaOapg.properties.artwork_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bpm"]) -> typing.Union[MetaOapg.properties.bpm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment_count"]) -> typing.Union[MetaOapg.properties.comment_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commentable"]) -> typing.Union[MetaOapg.properties.commentable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_count"]) -> typing.Union[MetaOapg.properties.download_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloadable"]) -> typing.Union[MetaOapg.properties.downloadable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embeddable_by"]) -> typing.Union[MetaOapg.properties.embeddable_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favoritings_count"]) -> typing.Union[MetaOapg.properties.favoritings_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union[MetaOapg.properties.genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isrc"]) -> typing.Union[MetaOapg.properties.isrc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_signature"]) -> typing.Union[MetaOapg.properties.key_signature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_name"]) -> typing.Union[MetaOapg.properties.label_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permalink_url"]) -> typing.Union[MetaOapg.properties.permalink_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playback_count"]) -> typing.Union[MetaOapg.properties.playback_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_title"]) -> typing.Union[MetaOapg.properties.purchase_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_url"]) -> typing.Union[MetaOapg.properties.purchase_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release"]) -> typing.Union[MetaOapg.properties.release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_day"]) -> typing.Union[MetaOapg.properties.release_day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_month"]) -> typing.Union[MetaOapg.properties.release_month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_year"]) -> typing.Union[MetaOapg.properties.release_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharing"]) -> typing.Union[MetaOapg.properties.sharing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_url"]) -> typing.Union[MetaOapg.properties.stream_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamable"]) -> typing.Union[MetaOapg.properties.streamable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag_list"]) -> typing.Union[MetaOapg.properties.tag_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_favorite"]) -> typing.Union[MetaOapg.properties.user_favorite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_playback_count"]) -> typing.Union[MetaOapg.properties.user_playback_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waveform_url"]) -> typing.Union[MetaOapg.properties.waveform_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_country_codes"]) -> typing.Union[MetaOapg.properties.available_country_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_url"]) -> typing.Union[MetaOapg.properties.download_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reposts_count"]) -> typing.Union[MetaOapg.properties.reposts_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_uri"]) -> typing.Union[MetaOapg.properties.secret_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "artwork_url", "bpm", "comment_count", "commentable", "created_at", "download_count", "downloadable", "duration", "embeddable_by", "favoritings_count", "genre", "id", "isrc", "key_signature", "kind", "label_name", "license", "permalink_url", "playback_count", "purchase_title", "purchase_url", "release", "release_day", "release_month", "release_year", "sharing", "stream_url", "streamable", "tag_list", "uri", "user", "user_favorite", "user_playback_count", "waveform_url", "available_country_codes", "access", "download_url", "reposts_count", "secret_uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        artwork_url: typing.Union[MetaOapg.properties.artwork_url, str, schemas.Unset] = schemas.unset,
        bpm: typing.Union[MetaOapg.properties.bpm, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comment_count: typing.Union[MetaOapg.properties.comment_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        commentable: typing.Union[MetaOapg.properties.commentable, bool, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, str, schemas.Unset] = schemas.unset,
        download_count: typing.Union[MetaOapg.properties.download_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        downloadable: typing.Union[MetaOapg.properties.downloadable, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        embeddable_by: typing.Union[MetaOapg.properties.embeddable_by, str, schemas.Unset] = schemas.unset,
        favoritings_count: typing.Union[MetaOapg.properties.favoritings_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        genre: typing.Union[MetaOapg.properties.genre, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isrc: typing.Union[MetaOapg.properties.isrc, str, schemas.Unset] = schemas.unset,
        key_signature: typing.Union[MetaOapg.properties.key_signature, str, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        label_name: typing.Union[MetaOapg.properties.label_name, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        permalink_url: typing.Union[MetaOapg.properties.permalink_url, str, schemas.Unset] = schemas.unset,
        playback_count: typing.Union[MetaOapg.properties.playback_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        purchase_title: typing.Union[MetaOapg.properties.purchase_title, str, schemas.Unset] = schemas.unset,
        purchase_url: typing.Union[MetaOapg.properties.purchase_url, str, schemas.Unset] = schemas.unset,
        release: typing.Union[MetaOapg.properties.release, str, schemas.Unset] = schemas.unset,
        release_day: typing.Union[MetaOapg.properties.release_day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        release_month: typing.Union[MetaOapg.properties.release_month, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        release_year: typing.Union[MetaOapg.properties.release_year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sharing: typing.Union[MetaOapg.properties.sharing, str, schemas.Unset] = schemas.unset,
        stream_url: typing.Union[MetaOapg.properties.stream_url, str, schemas.Unset] = schemas.unset,
        streamable: typing.Union[MetaOapg.properties.streamable, bool, schemas.Unset] = schemas.unset,
        tag_list: typing.Union[MetaOapg.properties.tag_list, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        user_favorite: typing.Union[MetaOapg.properties.user_favorite, bool, schemas.Unset] = schemas.unset,
        user_playback_count: typing.Union[MetaOapg.properties.user_playback_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        waveform_url: typing.Union[MetaOapg.properties.waveform_url, str, schemas.Unset] = schemas.unset,
        available_country_codes: typing.Union[MetaOapg.properties.available_country_codes, str, schemas.Unset] = schemas.unset,
        access: typing.Union[MetaOapg.properties.access, None, str, schemas.Unset] = schemas.unset,
        download_url: typing.Union[MetaOapg.properties.download_url, str, schemas.Unset] = schemas.unset,
        reposts_count: typing.Union[MetaOapg.properties.reposts_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        secret_uri: typing.Union[MetaOapg.properties.secret_uri, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Track':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            artwork_url=artwork_url,
            bpm=bpm,
            comment_count=comment_count,
            commentable=commentable,
            created_at=created_at,
            download_count=download_count,
            downloadable=downloadable,
            duration=duration,
            embeddable_by=embeddable_by,
            favoritings_count=favoritings_count,
            genre=genre,
            id=id,
            isrc=isrc,
            key_signature=key_signature,
            kind=kind,
            label_name=label_name,
            license=license,
            permalink_url=permalink_url,
            playback_count=playback_count,
            purchase_title=purchase_title,
            purchase_url=purchase_url,
            release=release,
            release_day=release_day,
            release_month=release_month,
            release_year=release_year,
            sharing=sharing,
            stream_url=stream_url,
            streamable=streamable,
            tag_list=tag_list,
            uri=uri,
            user=user,
            user_favorite=user_favorite,
            user_playback_count=user_playback_count,
            waveform_url=waveform_url,
            available_country_codes=available_country_codes,
            access=access,
            download_url=download_url,
            reposts_count=reposts_count,
            secret_uri=secret_uri,
            _configuration=_configuration,
            **kwargs,
        )

from soundcloud_python_sdk.model.user import User
